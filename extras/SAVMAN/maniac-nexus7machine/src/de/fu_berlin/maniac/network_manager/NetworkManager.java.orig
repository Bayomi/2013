package de.fu_berlin.maniac.network_manager;

import android.os.Environment;

import java.io.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import de.fu_berlin.maniac.packet_builder.*;
import de.fu_berlin.maniac.bank.*;

public class NetworkManager extends Thread {

	private ArrayList<InetAddress> backbones; // list of all Backbone IPs

	// for testing
	public InetAddress myOwnBackbone;

	private Socket clientSocket;
	private BankManager bankman;

	public NetworkManager() {
		backbones = new ArrayList<InetAddress>();
		bankman = new BankManager();
		myOwnBackbone = null;
	}

	/*
	 * Read file with Backbone Addresses
	 */
	public String read() throws IOException {

		String tmp = "";
		backbones.clear();

		File sdcard = Environment.getExternalStorageDirectory();
		File file = new File(sdcard, "generic.txt");
		FileInputStream fis = new FileInputStream(file);

		BufferedReader myReader = new BufferedReader(new InputStreamReader(fis));

		while ((tmp = myReader.readLine()) != null) {
			backbones.add(InetAddress.getByName(tmp));
		}

		myReader.close();
		return getBackbones().toString();

	}

	/*
	 * Return Stringlist of all possible Backbones (even the invisible ones)
	 */
	public ArrayList<InetAddress> getBackbones() {

		return backbones;
	}

	/*
	 * determine the Backbone with the best Link Quality
	 */
	public InetAddress findBestBackbone() throws UnknownHostException {

		int tmpindex = 0;
		float tmpcost = 999;

		ArrayList<Link> links = TopologyInfo.getLinks();
<<<<<<< HEAD
		System.out.println("links: "+links);
		for(int i=0;i<links.size();i++) {
=======
		for (int i = 0; i < links.size(); i++) {
>>>>>>> 5e14680cdadb1ec49526b0a02f4a5f6aceb80de3
			boolean found = false;
			int tmpindex2 = 0;
			while (!found && tmpindex2 < this.backbones.size()) {
				if (links.get(i).getIp().equals(backbones.get(tmpindex2))) {
					found = true;
					if (links.get(i).getCost() < tmpcost) {
						tmpindex = i;
						tmpcost = links.get(i).getCost();
					}
				}
				tmpindex2++;
			}
		}
<<<<<<< HEAD
		
		// TODO handle this properly
		try{
			return links.get(tmpindex).getIp();
		}catch(IndexOutOfBoundsException e ){
			System.err.println("no Backbone Routers found!");
			return null;
		}
=======

		return links.get(tmpindex).getIp();
>>>>>>> 5e14680cdadb1ec49526b0a02f4a5f6aceb80de3
	}

	private String readMessage(java.net.Socket socket) throws IOException {
		BufferedReader bufferedReader = new BufferedReader(
				new InputStreamReader(socket.getInputStream()));
		char[] buffer = new char[13];
		// blocking
		int anzahlZeichen = bufferedReader.read(buffer, 0, 13);
		byte[] buffer2 = new byte[13];
		for (int i = 0; i < buffer2.length; i++) {
			buffer2[i] = (byte) buffer[i];
		}
<<<<<<< HEAD
       
        Check mycheck = new Check(buffer2);
        String nachricht = "Transaction ID: " + mycheck.getTransID() + " Difference: " + mycheck.getAmount() + " Balance: " + mycheck.getNewBalance();
        bankman.update(mycheck);
       
        return nachricht;
    }

	
	private void initTCPConnection() {
		
		try {
			System.out.println("init tcp");
			clientSocket = new Socket(myOwnBackbone,51113);
			message = readMessage(clientSocket);
			
			DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
			PacketBuilder pb = PacketBuilder.getInstance();
			byte[] testdata = new byte[1];
			testdata[0] = 'A';
			InetAddress faddi = InetAddress.getByName("192.168.1.11");
			Data datab = pb.buildData(123, (Inet4Address)faddi, (Inet4Address)faddi, 10, 8, testdata);
			Advert adv = (Advert)pb.buildAdvert(datab, 10, 5);
			Bid bidchen = (Bid)pb.buildBid(adv, 8);
			BidWin bidwinchen = (BidWin)pb.buildBidWin(bidchen, 23);
			System.out.println("sending");
			outToServer.writeBytes(datab.getStreamableData());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
=======

		Check mycheck = new Check(buffer2);
		String nachricht = "Transaction ID: " + mycheck.getTransID()
				+ " Difference: " + mycheck.getAmount() + " Balance: "
				+ mycheck.getNewBalance();
		bankman.update(mycheck);
		return nachricht;
	}

	private void makeTCPConnection() {
		while (true) {

>>>>>>> 5e14680cdadb1ec49526b0a02f4a5f6aceb80de3
			try {
				clientSocket = new Socket(myOwnBackbone, 51113);
				readMessage(clientSocket);

				/**
				 * DataOutputStream outToServer = new
				 * DataOutputStream(clientSocket.getOutputStream());
				 * PacketBuilder pb = PacketBuilder.getInstance(); byte[]
				 * testdata = new byte[1]; testdata[0] = 'A'; InetAddress faddi
				 * = InetAddress.getByName("192.168.1.11"); Data datab =
				 * pb.buildData(123, (Inet4Address)faddi, (Inet4Address)faddi,
				 * 10, 8, testdata); Advert adv = (Advert)pb.buildAdvert(datab,
				 * 10, 5); Bid bidchen = (Bid)pb.buildBid(adv, 8); BidWin
				 * bidwinchen = (BidWin)pb.buildBidWin(bidchen);
				 * outToServer.write(datab.getStreamableData());
				 **/
			} catch (SocketTimeoutException e) {
				try {
					myOwnBackbone = findBestBackbone();
					clientSocket = new Socket(myOwnBackbone, 51113);
					readMessage(clientSocket);
				} catch (Exception e1) {
					e1.printStackTrace();
				}

				e.printStackTrace();
			} catch (IOException e) {

				e.printStackTrace();
			} finally {
				try {
					clientSocket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	@Override
	public void run() {
		try {
			read();
			myOwnBackbone = findBestBackbone();
<<<<<<< HEAD
			initTCPConnection();
		} catch (UnknownHostException uhe){
			// TODO better error handling
			System.err.println("No host found:");
			uhe.printStackTrace();
=======
>>>>>>> 5e14680cdadb1ec49526b0a02f4a5f6aceb80de3
		} catch (Exception e) {
			e.printStackTrace();
		}
		// Establishes the TCP-Connection and handles everything
		makeTCPConnection();
	}
}
